// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingAndDietApp.Infrastructure.Context;

#nullable disable

namespace TrainingAndDietApp.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240212151858_seedDatachanges")]
    partial class seedDatachanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("IdCertificate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCertificate"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<int>("IdMentor")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("PdfUri")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdCertificate");

                    b.HasIndex("IdMentor");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Diet", b =>
                {
                    b.Property<int>("IdDiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDiet"));

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("IdDietician")
                        .HasColumnType("integer");

                    b.Property<int?>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<int>("TotalKcal")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdDiet");

                    b.HasIndex("IdDietician");

                    b.HasIndex("IdPupil");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("IdExercise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdExercise"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("ExerciseSteps")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.Property<int?>("IdTrainer")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdExercise");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Gym", b =>
                {
                    b.Property<int>("IdGym")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGym"));

                    b.Property<int>("AddedBy")
                        .HasColumnType("integer");

                    b.Property<int>("IdAddress")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdGym");

                    b.HasIndex("IdAddress");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            IdGym = 1,
                            AddedBy = 0,
                            IdAddress = 1,
                            IsAccepted = false,
                            Name = "McFit Wołoska"
                        },
                        new
                        {
                            IdGym = 2,
                            AddedBy = 0,
                            IdAddress = 2,
                            IsAccepted = false,
                            Name = "CityFit Centrum"
                        },
                        new
                        {
                            IdGym = 3,
                            AddedBy = 0,
                            IdAddress = 3,
                            IsAccepted = false,
                            Name = "CityFit Wilanów"
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Meal", b =>
                {
                    b.Property<int>("IdMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMeal"));

                    b.Property<int>("IdDietician")
                        .HasColumnType("integer");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Kcal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PrepareSteps")
                        .IsRequired()
                        .HasColumnType("varchar(300)");

                    b.HasKey("IdMeal");

                    b.HasIndex("IdDietician");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.MealDiet", b =>
                {
                    b.Property<int>("IdMealDiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMealDiet"));

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<string>("HourOfMeal")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<int>("IdDiet")
                        .HasColumnType("integer");

                    b.Property<int>("IdMeal")
                        .HasColumnType("integer");

                    b.HasKey("IdMealDiet");

                    b.HasIndex("IdDiet");

                    b.HasIndex("IdMeal");

                    b.ToTable("Meal_Diets");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Opinion", b =>
                {
                    b.Property<int>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<int>("IdMentor")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("OpinionDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("IdPupil", "IdMentor");

                    b.HasIndex("IdMentor");

                    b.ToTable("Opinion");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.PupilMentor", b =>
                {
                    b.Property<int>("IdMentor")
                        .HasColumnType("integer");

                    b.Property<int>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.HasKey("IdMentor", "IdPupil");

                    b.HasIndex("IdPupil");

                    b.ToTable("Pupil_mentors");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TraineeExercise", b =>
                {
                    b.Property<int>("IdTraineeExercise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTraineeExercise"));

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(200)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("IdExercise")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainingPlan")
                        .HasColumnType("integer");

                    b.Property<string>("RepetitionsNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("integer");

                    b.HasKey("IdTraineeExercise");

                    b.HasIndex("IdExercise");

                    b.HasIndex("IdTrainingPlan");

                    b.ToTable("Trainee_exercises");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.Property<int>("IdTrainingPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTrainingPlan"));

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdTrainingPlan");

                    b.HasIndex("IdPupil");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Training_plans");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Bio")
                        .HasColumnType("varchar(1500)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<decimal?>("DietPriceFrom")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("DietPriceTo")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(254)");

                    b.Property<string>("HashedPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("IdRole")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUri")
                        .HasColumnType("text");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("PersonalTrainingPriceFrom")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("PersonalTrainingPriceTo")
                        .HasColumnType("decimal(7,2)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefreshTokenExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Sex")
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("TrainingPlanPriceFrom")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("TrainingPlanPriceTo")
                        .HasColumnType("decimal(7,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            Bio = "Pasjonat zdrowego stylu życia i fitnessu. Z ponad 5-letnim doświadczeniem jako trener personalny, pomogłem wielu osobom osiągnąć ich cele zdrowotne i kondycyjne. Specjalizuję się w treningach siłowych, kondycyjnych oraz w doradztwie żywieniowym.",
                            Email = "michal@gmail.com",
                            HashedPassword = "$2a$11$WLvEJW0cgBdb0f81E9tt/uB41IskjQuuNsVFT7eJFpYl.aqSdhlSu",
                            IdRole = 3,
                            IsAccepted = false,
                            LastName = "Emczyk",
                            Name = "Michał",
                            PhoneNumber = "48777888777",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 2,
                            Bio = "Zawodowa trenerka fitness z pasją do jogi i pilatesu. Uwielbiam inspirować innych do prowadzenia zdrowszego trybu życia. Moje sesje treningowe są energiczne, motywujące i dostosowane do indywidualnych potrzeb każdego klienta.",
                            Email = "anna@gmail.com",
                            HashedPassword = "$2a$11$WLvEJW0cgBdb0f81E9tt/uB41IskjQuuNsVFT7eJFpYl.aqSdhlSu",
                            IdRole = 3,
                            IsAccepted = false,
                            LastName = "Kowalska",
                            Name = "Anna",
                            PhoneNumber = "48666778888",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 3,
                            Bio = "Dietetyk kliniczny z zamiłowaniem do sportu. Moje podejście łączy naukowe podstawy żywienia z praktycznymi poradami, które pomagają klientom osiągnąć ich cele zdrowotne bez poświęcania przyjemności jedzenia.",
                            Email = "andrzej@gmail.com",
                            HashedPassword = "$2a$11$WLvEJW0cgBdb0f81E9tt/uB41IskjQuuNsVFT7eJFpYl.aqSdhlSu",
                            IdRole = 4,
                            IsAccepted = false,
                            LastName = "Kowalski",
                            Name = "Andrzej",
                            PhoneNumber = "48555667777",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 4,
                            Bio = "Ekspert od wellness i poprawy samopoczucia, z certyfikatem dietetyka. Zajmuję się holistycznym podejściem do zdrowia, łączac odżywianie i mentalność, aby wspierać klientów w osiąganiu zrównoważonego stylu życia.",
                            Email = "marcin@gmail.com",
                            HashedPassword = "$2a$11$WLvEJW0cgBdb0f81E9tt/uB41IskjQuuNsVFT7eJFpYl.aqSdhlSu",
                            IdRole = 4,
                            IsAccepted = false,
                            LastName = "Michalski",
                            Name = "Marcin",
                            PhoneNumber = "48554567890",
                            Sex = "Male"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAddress"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAddress");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            IdAddress = 1,
                            City = "Warszawa",
                            PostalCode = "02-222",
                            Street = "Wołoska"
                        },
                        new
                        {
                            IdAddress = 2,
                            City = "Warszawa",
                            PostalCode = "02-324",
                            Street = "Złota"
                        },
                        new
                        {
                            IdAddress = 3,
                            City = "Warszawa",
                            PostalCode = "02-421",
                            Street = "Syta"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pupil"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Trainer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dietician"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dietician-Trainer"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.TrainerGym", b =>
                {
                    b.Property<int>("IdGym")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("integer");

                    b.HasKey("IdGym", "IdTrainer");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Trainer_Gyms");

                    b.HasData(
                        new
                        {
                            IdGym = 1,
                            IdTrainer = 1
                        },
                        new
                        {
                            IdGym = 1,
                            IdTrainer = 2
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Certificate", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "User")
                        .WithMany("Certificates")
                        .HasForeignKey("IdMentor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Diet", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Dietician")
                        .WithMany("DietsAsDietician")
                        .HasForeignKey("IdDietician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("DietsAsPupil")
                        .HasForeignKey("IdPupil");

                    b.Navigation("Dietician");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Trainer")
                        .WithMany("Exercises")
                        .HasForeignKey("IdTrainer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Gym", b =>
                {
                    b.HasOne("Training_and_diet_backend.Models.Address", "Address")
                        .WithMany("Gyms")
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Meal", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Dietician")
                        .WithMany()
                        .HasForeignKey("IdDietician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.MealDiet", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.Diet", "Diet")
                        .WithMany("MealsInDiet")
                        .HasForeignKey("IdDiet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.Meal", "Meal")
                        .WithMany("Meals")
                        .HasForeignKey("IdMeal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Opinion", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Mentor")
                        .WithMany("MentorOpinions")
                        .HasForeignKey("IdMentor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("PupilOpinions")
                        .HasForeignKey("IdPupil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.PupilMentor", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Mentor")
                        .WithMany("MentorPupils")
                        .HasForeignKey("IdMentor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("PupilMentors")
                        .HasForeignKey("IdPupil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TraineeExercise", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.Exercise", "Exercise")
                        .WithMany("TraineeExercises")
                        .HasForeignKey("IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.TrainingPlan", "TrainingPlan")
                        .WithMany("TraineeExercises")
                        .HasForeignKey("IdTrainingPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("PupilTrainingPlans")
                        .HasForeignKey("IdPupil");

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Trainer")
                        .WithMany("TrainerTrainingPlans")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pupil");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.User", b =>
                {
                    b.HasOne("Training_and_diet_backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.TrainerGym", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.Gym", "Gym")
                        .WithMany("TrainerGyms")
                        .HasForeignKey("IdGym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Trainer")
                        .WithMany("TrainerGyms")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Diet", b =>
                {
                    b.Navigation("MealsInDiet");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("TraineeExercises");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Gym", b =>
                {
                    b.Navigation("TrainerGyms");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Meal", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.Navigation("TraineeExercises");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.User", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("DietsAsDietician");

                    b.Navigation("DietsAsPupil");

                    b.Navigation("Exercises");

                    b.Navigation("MentorOpinions");

                    b.Navigation("MentorPupils");

                    b.Navigation("PupilMentors");

                    b.Navigation("PupilOpinions");

                    b.Navigation("PupilTrainingPlans");

                    b.Navigation("TrainerGyms");

                    b.Navigation("TrainerTrainingPlans");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Address", b =>
                {
                    b.Navigation("Gyms");
                });
#pragma warning restore 612, 618
        }
    }
}
