// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TrainingAndDietApp.Infrastructure.Context;

#nullable disable

namespace Training_and_diet_backend.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240107185347_DeleteProfilePictureColumnFromUserTable")]
    partial class DeleteProfilePictureColumnFromUserTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TrainingAndDietApp.DAL.EntityModels.Diet", b =>
                {
                    b.Property<int>("IdDiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdDiet"));

                    b.Property<string>("DietDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("Date");

                    b.Property<int>("IdDietician")
                        .HasColumnType("integer");

                    b.Property<int>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<int>("TotalKcal")
                        .HasColumnType("integer");

                    b.HasKey("IdDiet");

                    b.HasIndex("IdDietician");

                    b.HasIndex("IdPupil");

                    b.ToTable("Diets");

                    b.HasData(
                        new
                        {
                            IdDiet = 1,
                            DietDuration = "1",
                            EndDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDietician = 1,
                            IdPupil = 2,
                            StartDate = new DateTime(2023, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalKcal = 3000
                        },
                        new
                        {
                            IdDiet = 2,
                            DietDuration = "30",
                            EndDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDietician = 1,
                            IdPupil = 2,
                            StartDate = new DateTime(2023, 10, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalKcal = 2000
                        },
                        new
                        {
                            IdDiet = 3,
                            DietDuration = "30",
                            EndDate = new DateTime(2023, 12, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdDietician = 1,
                            IdPupil = 2,
                            StartDate = new DateTime(2023, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TotalKcal = 2500
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.EntityModels.PupilMentor", b =>
                {
                    b.Property<int>("IdMentor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    b.Property<int>("IdPupil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(1);

                    b.HasKey("IdMentor", "IdPupil");

                    b.HasIndex("IdPupil");

                    b.ToTable("Pupil_mentors");

                    b.HasData(
                        new
                        {
                            IdMentor = 1,
                            IdPupil = 2
                        },
                        new
                        {
                            IdMentor = 1,
                            IdPupil = 3
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.Models.Meal", b =>
                {
                    b.Property<int>("IdMeal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMeal"));

                    b.Property<int>("IdDietician")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Kcal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrepareSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdMeal");

                    b.HasIndex("IdDietician");

                    b.ToTable("Meals");

                    b.HasData(
                        new
                        {
                            IdMeal = 1,
                            IdDietician = 1,
                            Ingredients = "{\"ingredient1\": \"ziemniaki\", \"ingredient2\": \"cebula\", \"ingredient3\":  \"mąka\" }",
                            Kcal = "{\"kcal\": \"651\", \"Białko\": \"16\", \"Węglowodany\":  \"160\" , \"Tłuszcze\": \"30\" }",
                            Name = "Placki ziemniaczane",
                            PrepareSteps = "{\"test1\": \"test\", \"test2\": \"test\", \"test3\":  \"test\" }"
                        },
                        new
                        {
                            IdMeal = 2,
                            IdDietician = 1,
                            Ingredients = "{\"ingredient1\": \"platki owsiane\", \"ingredient2\": \"mleko\", \"ingredient3\":  \"cukier\" }",
                            Kcal = "{\"kcal\": \"765\", \"Białko\": \"20\", \"Węglowodany\":  \"165\" , \"Tłuszcze\": \"20\" }",
                            Name = "Owsianka",
                            PrepareSteps = "{\"test1\": \"test\", \"test2\": \"test\", \"test3\":  \"test\" }"
                        },
                        new
                        {
                            IdMeal = 3,
                            IdDietician = 2,
                            Ingredients = "{\"ingredient1\": \"szynka\", \"ingredient2\": \"chleb\", \"ingredient3\":  \"masło\" }",
                            Kcal = "{\"kcal\": \"700\", \"Białko\": \"30\", \"Węglowodany\":  \"200\" , \"Tłuszcze\": \"26\" }",
                            Name = "Kanapki z szynką",
                            PrepareSteps = "{\"test1\": \"test\", \"test2\": \"test\", \"test3\":  \"test\" }"
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Exercise", b =>
                {
                    b.Property<int>("IdExercise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdExercise"));

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExerciseSteps")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IdTrainer")
                        .HasColumnType("integer");

                    b.Property<byte[]>("Image")
                        .HasColumnType("bytea");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdExercise");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            IdExercise = 1,
                            Details = "Podstawowe ćwiczenie siłowe, angażuje mięśnie klatki piersiowej, ramion i tricepsa.",
                            ExerciseSteps = "[{\"Step\": 1, \"Description\": \"Połóż się na podłodze na brzuchu, ręce ustawione nieco szerzej niż szerokość ramion.\"}, {\"Step\": 2, \"Description\": \"Wypnij się na rękach i naciskaj ciało do góry, wyprostowując ręce.\"}, {\"Step\": 3, \"Description\": \"Powoli wróć do pozycji wyjściowej, zginając ręce w łokciach.\"}]",
                            IdTrainer = 1,
                            Name = "Pompki"
                        },
                        new
                        {
                            IdExercise = 2,
                            Details = "Ćwiczenie wzmacniające mięśnie nóg, pośladków i dolnej części pleców.",
                            ExerciseSteps = "Step1: Stań prosto, nogi ustawione na szerokość bioder Step 2: Opuszczaj biodra w dół, jakbyś siadał na niewidzialne krzesło Step: 3,Powoli wracaj do pozycji wyjściowej, naciskając pięty w podłogę.",
                            IdTrainer = 1,
                            Name = "Przysiady"
                        },
                        new
                        {
                            IdExercise = 3,
                            Details = "Ćwiczenie wzmacniające mięśnie brzucha, pleców i ramion.",
                            ExerciseSteps = "[{\"Step\": 1, \"Description\": \"Połóż się na brzuchu, opierając się na przedramionach i palcach u stóp.\"}, {\"Step\": 2, \"Description\": \"Utrzymuj prostą linię od głowy do pięt, napinając mięśnie brzucha.\"}, {\"Step\": 3, \"Description\": \"Utrzymuj tę pozycję przez określony czas.\"}]",
                            Name = "Plank"
                        },
                        new
                        {
                            IdExercise = 14,
                            Details = "Ćwiczenie wzmacniające mięśnie nóg i pośladków",
                            ExerciseSteps = "1. Stań w rozkroku i ugnij nogi w kolanach",
                            Name = "Przysiady"
                        },
                        new
                        {
                            IdExercise = 15,
                            Details = "Ćwiczenie wzmacniające mięśnie piersiowe, pleców i rąk.",
                            ExerciseSteps = "W podporze przodem ugnij ręcę w łokciach",
                            Name = "Pompki"
                        },
                        new
                        {
                            IdExercise = 16,
                            Details = "Ćwiczenie wzmacniające mięśnie boczne tułowia oraz ramiona.",
                            ExerciseSteps = "Połóż się na boku i podnieś biodra, tworząc prostą linię od stóp do głowy.",
                            Name = "Boczny plank"
                        },
                        new
                        {
                            IdExercise = 17,
                            Details = "Ćwiczenie angażujące głębokie mięśnie brzucha oraz stabilizujące biodra.",
                            ExerciseSteps = "W pozycji planku na przedramionach, unieś na przemian każdą nogę.",
                            Name = "Plank z podnoszeniem nóg"
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TraineeExercise", b =>
                {
                    b.Property<int>("IdTraineeExercise")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTraineeExercise"));

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("DayOfWeek")
                        .HasColumnType("integer");

                    b.Property<int>("IdExercise")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainingPlan")
                        .HasColumnType("integer");

                    b.Property<string>("RepetitionsNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SeriesNumber")
                        .HasColumnType("integer");

                    b.HasKey("IdTraineeExercise");

                    b.HasIndex("IdExercise");

                    b.HasIndex("IdTrainingPlan");

                    b.ToTable("Trainee_exercises");

                    b.HasData(
                        new
                        {
                            IdTraineeExercise = 1,
                            DayOfWeek = 5,
                            IdExercise = 1,
                            IdTrainingPlan = 1,
                            RepetitionsNumber = "12",
                            SeriesNumber = 3
                        },
                        new
                        {
                            IdTraineeExercise = 2,
                            DayOfWeek = 1,
                            IdExercise = 2,
                            IdTrainingPlan = 1,
                            RepetitionsNumber = "10",
                            SeriesNumber = 4
                        },
                        new
                        {
                            IdTraineeExercise = 3,
                            DayOfWeek = 2,
                            IdExercise = 3,
                            IdTrainingPlan = 2,
                            RepetitionsNumber = "15",
                            SeriesNumber = 2
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.Property<int>("IdTrainingPlan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTrainingPlan"));

                    b.Property<string>("CustomName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NumberOfWeeks")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("Date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdTrainingPlan");

                    b.HasIndex("IdPupil");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Training_plans");

                    b.HasData(
                        new
                        {
                            IdTrainingPlan = 1,
                            CustomName = "Plan treningowy dla mirka",
                            IdPupil = 2,
                            IdTrainer = 1,
                            Name = "Plan treningowy dla początkujących",
                            NumberOfWeeks = 0,
                            StartDate = new DateTime(2023, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Siłowy"
                        },
                        new
                        {
                            IdTrainingPlan = 2,
                            CustomName = "Plan treningowy dla jacka",
                            IdPupil = 2,
                            IdTrainer = 1,
                            Name = "Plan treningowy na odchudzanie",
                            NumberOfWeeks = 0,
                            StartDate = new DateTime(2023, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Type = "Cardio"
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Bio")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("Date");

                    b.Property<decimal?>("DietPriceFrom")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("DietPriceTo")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("EmailValidated")
                        .HasColumnType("boolean");

                    b.Property<decimal?>("Height")
                        .HasColumnType("decimal(3,2)");

                    b.Property<int>("IdRole")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("PersonalTrainingPriceFrom")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("PersonalTrainingPriceTo")
                        .HasColumnType("decimal(4,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("char(11)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<decimal?>("TrainingPlanPriceFrom")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("TrainingPlanPriceTo")
                        .HasColumnType("decimal(4,2)");

                    b.Property<decimal?>("Weight")
                        .HasColumnType("decimal(3,2)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdRole");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            IdUser = 1,
                            Bio = "Cześć jestem Kuba i dużo trenuje. Zapraszam na treningi indywidualne",
                            Email = "michal@gmail.com",
                            EmailValidated = true,
                            IdRole = 1,
                            LastName = "Emczyk",
                            Name = "Michał",
                            PhoneNumber = "48777888777",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 2,
                            Bio = "Cześć jestem Kuba i dużo trenuje. Zapraszam na treningi indywidualne",
                            Email = "anna@gmail.com",
                            EmailValidated = true,
                            IdRole = 2,
                            LastName = "Kowalska",
                            Name = "Anna",
                            PhoneNumber = "48666778888",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 3,
                            Bio = "Cześć jestem Kuba i dużo trenuje. Zapraszam na treningi indywidualne",
                            Email = "john@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Doe",
                            Name = "John",
                            PhoneNumber = "48555667777",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 4,
                            Bio = "Hi, I'm Charlie. Let's stay active and have fun!",
                            Email = "charlie@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Brown",
                            Name = "Charlie",
                            PhoneNumber = "48554567890",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 5,
                            Bio = "Hello, I'm Diana. Fitness is my passion!",
                            Email = "diana@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Miller",
                            Name = "Diana",
                            PhoneNumber = "48555678901",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 6,
                            Bio = "Hi, I'm Frank. Let's achieve our fitness goals together!",
                            Email = "frank@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Davis",
                            Name = "Frank",
                            PhoneNumber = "48556789012",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 7,
                            Bio = "Hello, I'm Grace. Fitness is my lifestyle!",
                            Email = "grace@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Anderson",
                            Name = "Grace",
                            PhoneNumber = "48557890123",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 8,
                            Bio = "Hey, I'm Harry. Let's push our limits in every workout!",
                            Email = "harry@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Moore",
                            Name = "Harry",
                            PhoneNumber = "48558901234",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 9,
                            Bio = "Hi, I'm Ivy. Fitness is my passion and I'm here to inspire!",
                            Email = "ivy@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Turner",
                            Name = "Ivy",
                            PhoneNumber = "48559012345",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 10,
                            Bio = "Hello, I'm Jack. Let's make every workout count!",
                            Email = "jack@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "White",
                            Name = "Jack",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 11,
                            Bio = "Hi, I'm Kelly. Fitness is the key to a healthy life!",
                            Email = "kelly@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Martin",
                            Name = "Kelly",
                            PhoneNumber = "48551234567",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 12,
                            Bio = "Hey, I'm Leo. Let's crush our fitness goals!",
                            Email = "leo@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Baker",
                            Name = "Leo",
                            PhoneNumber = "48552345678",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 13,
                            Bio = "Hello, I'm Mia. Fitness is not just a hobby, it's a way of life!",
                            Email = "mia@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Collins",
                            Name = "Mia",
                            PhoneNumber = "48553456789",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 14,
                            Bio = "Hi, I'm Nathan. Let's embrace a fit and healthy lifestyle!",
                            Email = "nathan@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Ward",
                            Name = "Nathan",
                            PhoneNumber = "48554567890",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 15,
                            Bio = "Hey, I'm Olivia. Fitness enthusiast and advocate!",
                            Email = "olivia@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Perry",
                            Name = "Olivia",
                            PhoneNumber = "48555678901",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 16,
                            Bio = "Hello, I'm Peter. Let's make fitness a fun journey!",
                            Email = "peter@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Cooper",
                            Name = "Peter",
                            PhoneNumber = "48556789012",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 17,
                            Bio = "Hi, I'm Quinn. Fitness is my daily dose of happiness!",
                            Email = "quinn@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Barnes",
                            Name = "Quinn",
                            PhoneNumber = "48557890123",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 18,
                            Bio = "Hey, I'm Ryan. Fitness is the key to a balanced life!",
                            Email = "ryan@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Fisher",
                            Name = "Ryan",
                            PhoneNumber = "48558901234",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 19,
                            Bio = "Hello, I'm Sophie. Let's stay fit and fabulous!",
                            Email = "sophie@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Turner",
                            Name = "Sophie",
                            PhoneNumber = "48559012345",
                            Sex = "Female"
                        },
                        new
                        {
                            IdUser = 20,
                            Bio = "Hi, I'm Tom. Fitness is my lifestyle choice!",
                            Email = "tom@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "Harris",
                            Name = "Tom",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 21,
                            Bio = "Hi, I'm Filip. Fitness is my hobby!",
                            Email = "filipwgmail.com",
                            EmailValidated = true,
                            IdRole = 4,
                            LastName = "W",
                            Name = "Filip",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 22,
                            Bio = "Hi, I'm Jakub. Fitness is my passion!",
                            Email = "jakubs@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "test",
                            Name = "test",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 23,
                            Bio = "Hi, I'm Jakub. Fitness is my passion!",
                            Email = "jakubs@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "test",
                            Name = "test",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 24,
                            Bio = "Hi, I'm Jakub. Fitness is my passion!",
                            Email = "jakubs@gmail.com",
                            EmailValidated = true,
                            IdRole = 3,
                            LastName = "test",
                            Name = "test",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        },
                        new
                        {
                            IdUser = 25,
                            Bio = "Hi, I'm Jakub. Fitness is my passion!",
                            Email = "jakubs@gmail.com",
                            EmailValidated = true,
                            IdRole = 5,
                            LastName = "test",
                            Name = "Dietician-Trainer",
                            PhoneNumber = "48550123456",
                            Sex = "Male"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Address", b =>
                {
                    b.Property<int>("IdAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAddress"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("char(6)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdAddress");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            IdAddress = 1,
                            City = "Warszawa",
                            PostalCode = "02-222",
                            Street = "Zlota"
                        },
                        new
                        {
                            IdAddress = 2,
                            City = "Białystok",
                            PostalCode = "02-324",
                            Street = "Kryształowa"
                        },
                        new
                        {
                            IdAddress = 3,
                            City = "Kraków",
                            PostalCode = "02-421",
                            Street = "Mendelejewa"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Gym", b =>
                {
                    b.Property<int>("IdGym")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdGym"));

                    b.Property<int>("IdAddress")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdGym");

                    b.HasIndex("IdAddress");

                    b.ToTable("Gyms");

                    b.HasData(
                        new
                        {
                            IdGym = 1,
                            IdAddress = 1,
                            Name = "Gym1"
                        },
                        new
                        {
                            IdGym = 2,
                            IdAddress = 2,
                            Name = "Gym2"
                        },
                        new
                        {
                            IdGym = 3,
                            IdAddress = 3,
                            Name = "Gym3"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.MealDiet", b =>
                {
                    b.Property<int>("IdMeal")
                        .HasColumnType("integer");

                    b.Property<int>("IdDiet")
                        .HasColumnType("integer");

                    b.Property<string>("Comments")
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<int>("IdMealDiet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMealDiet"));

                    b.HasKey("IdMeal", "IdDiet");

                    b.HasIndex("IdDiet");

                    b.ToTable("Meal_Diets");

                    b.HasData(
                        new
                        {
                            IdMeal = 1,
                            IdDiet = 1,
                            Date = new DateTime(2023, 12, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdMealDiet = 1
                        },
                        new
                        {
                            IdMeal = 2,
                            IdDiet = 1,
                            Date = new DateTime(2023, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdMealDiet = 2
                        },
                        new
                        {
                            IdMeal = 1,
                            IdDiet = 2,
                            Date = new DateTime(2023, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdMealDiet = 3
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Opinion", b =>
                {
                    b.Property<int>("IdPupil")
                        .HasColumnType("integer");

                    b.Property<int>("IdMentor")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime>("OpinionDate")
                        .HasColumnType("Date");

                    b.Property<decimal>("Rate")
                        .HasColumnType("decimal(2,1)");

                    b.HasKey("IdPupil", "IdMentor");

                    b.HasIndex("IdMentor");

                    b.ToTable("Opinion");

                    b.HasData(
                        new
                        {
                            IdPupil = 2,
                            IdMentor = 1,
                            Content = "Jakub jest nie tylko świetnym trenerem, ale także osobą, która zawsze wierzyła we mnie i wspierała mnie w moich celach. Jego podejście do treningów było zawsze profesjonalne i skuteczne, a jednocześnie przyjazne i motywujące. Potrafił znaleźć w każdym z naszych zawodników mocne strony i pomóc nam w ich rozwijaniu.\nDzięki trenerowi Jakubowi, zdobyłem wiele umiejętności, które pomogły mi w osiągnięciu sukcesów na boisku. Jego wiedza i doświadczenie były bezcenne, a jego pozytywna energia i entuzjazm zawsze motywowały mnie do dalszej pracy i rozwoju.",
                            OpinionDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 5m
                        },
                        new
                        {
                            IdPupil = 3,
                            IdMentor = 1,
                            Content = "Jakub jest nie tylko świetnym trenerem, ale także osobą, która zawsze wierzyła we mnie i wspierała mnie w moich celach. Jego podejście do treningów było zawsze profesjonalne i skuteczne, a jednocześnie przyjazne i motywujące. Potrafił znaleźć w każdym z naszych zawodników mocne strony i pomóc nam w ich rozwijaniu.\nDzięki trenerowi Jakubowi, zdobyłem wiele umiejętności, które pomogły mi w osiągnięciu sukcesów na boisku. Jego wiedza i doświadczenie były bezcenne, a jego pozytywna energia i entuzjazm zawsze motywowały mnie do dalszej pracy i rozwoju.",
                            OpinionDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 2m
                        },
                        new
                        {
                            IdPupil = 5,
                            IdMentor = 22,
                            Content = "Jakub jest nie tylko świetnym trenerem, ale także osobą, która zawsze wierzyła we mnie i wspierała mnie w moich celach. Jego podejście do treningów było zawsze profesjonalne i skuteczne, a jednocześnie przyjazne i motywujące. Potrafił znaleźć w każdym z naszych zawodników mocne strony i pomóc nam w ich rozwijaniu.\nDzięki trenerowi Jakubowi, zdobyłem wiele umiejętności, które pomogły mi w osiągnięciu sukcesów na boisku. Jego wiedza i doświadczenie były bezcenne, a jego pozytywna energia i entuzjazm zawsze motywowały mnie do dalszej pracy i rozwoju.",
                            OpinionDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4m
                        },
                        new
                        {
                            IdPupil = 6,
                            IdMentor = 22,
                            Content = "Jakub jest nie tylko świetnym trenerem, ale także osobą, która zawsze wierzyła we mnie i wspierała mnie w moich celach. Jego podejście do treningów było zawsze profesjonalne i skuteczne, a jednocześnie przyjazne i motywujące. Potrafił znaleźć w każdym z naszych zawodników mocne strony i pomóc nam w ich rozwijaniu.\nDzięki trenerowi Jakubowi, zdobyłem wiele umiejętności, które pomogły mi w osiągnięciu sukcesów na boisku. Jego wiedza i doświadczenie były bezcenne, a jego pozytywna energia i entuzjazm zawsze motywowały mnie do dalszej pracy i rozwoju.",
                            OpinionDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 5m
                        },
                        new
                        {
                            IdPupil = 7,
                            IdMentor = 23,
                            Content = "Jakub jest nie tylko świetnym trenerem, ale także osobą, która zawsze wierzyła we mnie i wspierała mnie w moich celach. Jego podejście do treningów było zawsze profesjonalne i skuteczne, a jednocześnie przyjazne i motywujące. Potrafił znaleźć w każdym z naszych zawodników mocne strony i pomóc nam w ich rozwijaniu.\nDzięki trenerowi Jakubowi, zdobyłem wiele umiejętności, które pomogły mi w osiągnięciu sukcesów na boisku. Jego wiedza i doświadczenie były bezcenne, a jego pozytywna energia i entuzjazm zawsze motywowały mnie do dalszej pracy i rozwoju.",
                            OpinionDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 2m
                        },
                        new
                        {
                            IdPupil = 8,
                            IdMentor = 23,
                            Content = "Jakub jest nie tylko świetnym trenerem, ale także osobą, która zawsze wierzyła we mnie i wspierała mnie w moich celach. Jego podejście do treningów było zawsze profesjonalne i skuteczne, a jednocześnie przyjazne i motywujące. Potrafił znaleźć w każdym z naszych zawodników mocne strony i pomóc nam w ich rozwijaniu.\nDzięki trenerowi Jakubowi, zdobyłem wiele umiejętności, które pomogły mi w osiągnięciu sukcesów na boisku. Jego wiedza i doświadczenie były bezcenne, a jego pozytywna energia i entuzjazm zawsze motywowały mnie do dalszej pracy i rozwoju.",
                            OpinionDate = new DateTime(2023, 10, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Rate = 4m
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Role");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pupil"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Trainer"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Dietician"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Dietician-Trainer"
                        });
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.TrainerGym", b =>
                {
                    b.Property<int>("IdGym")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainer")
                        .HasColumnType("integer");

                    b.Property<int>("IdTrainerGym")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(0);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdTrainerGym"));

                    b.HasKey("IdGym", "IdTrainer");

                    b.HasIndex("IdTrainer");

                    b.ToTable("Trainer_Gyms");

                    b.HasData(
                        new
                        {
                            IdGym = 1,
                            IdTrainer = 1,
                            IdTrainerGym = 0
                        },
                        new
                        {
                            IdGym = 2,
                            IdTrainer = 2,
                            IdTrainerGym = 0
                        },
                        new
                        {
                            IdGym = 3,
                            IdTrainer = 3,
                            IdTrainerGym = 0
                        });
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.EntityModels.Diet", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Dietician")
                        .WithMany("DietsAsDietician")
                        .HasForeignKey("IdDietician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("DietsAsPupil")
                        .HasForeignKey("IdPupil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.EntityModels.PupilMentor", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Mentor")
                        .WithMany("MentorPupils")
                        .HasForeignKey("IdMentor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("PupilMentors")
                        .HasForeignKey("IdPupil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.Models.Meal", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Dietician")
                        .WithMany()
                        .HasForeignKey("IdDietician")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dietician");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Exercise", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Trainer")
                        .WithMany("Exercises")
                        .HasForeignKey("IdTrainer");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TraineeExercise", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.Exercise", "Exercise")
                        .WithMany("TraineeExercises")
                        .HasForeignKey("IdExercise")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.TrainingPlan", "TrainingPlan")
                        .WithMany("TraineeExercises")
                        .HasForeignKey("IdTrainingPlan")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("TrainingPlan");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("PupilTrainingPlans")
                        .HasForeignKey("IdPupil");

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Trainer")
                        .WithMany("TrainerTrainingPlans")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pupil");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.User", b =>
                {
                    b.HasOne("Training_and_diet_backend.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Gym", b =>
                {
                    b.HasOne("Training_and_diet_backend.Models.Address", "Address")
                        .WithMany("Gyms")
                        .HasForeignKey("IdAddress")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.MealDiet", b =>
                {
                    b.HasOne("TrainingAndDietApp.DAL.EntityModels.Diet", "Diet")
                        .WithMany("MealsInDiet")
                        .HasForeignKey("IdDiet")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.DAL.Models.Meal", "Meal")
                        .WithMany("Meals")
                        .HasForeignKey("IdMeal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("Meal");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Opinion", b =>
                {
                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Mentor")
                        .WithMany("MentorOpinions")
                        .HasForeignKey("IdMentor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Pupil")
                        .WithMany("PupilOpinions")
                        .HasForeignKey("IdPupil")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mentor");

                    b.Navigation("Pupil");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.TrainerGym", b =>
                {
                    b.HasOne("Training_and_diet_backend.Models.Gym", "Gym")
                        .WithMany("TrainerGyms")
                        .HasForeignKey("IdGym")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TrainingAndDietApp.Domain.Entities.User", "Trainer")
                        .WithMany("TrainerGyms")
                        .HasForeignKey("IdTrainer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gym");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.EntityModels.Diet", b =>
                {
                    b.Navigation("MealsInDiet");
                });

            modelBuilder.Entity("TrainingAndDietApp.DAL.Models.Meal", b =>
                {
                    b.Navigation("Meals");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.Exercise", b =>
                {
                    b.Navigation("TraineeExercises");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.TrainingPlan", b =>
                {
                    b.Navigation("TraineeExercises");
                });

            modelBuilder.Entity("TrainingAndDietApp.Domain.Entities.User", b =>
                {
                    b.Navigation("DietsAsDietician");

                    b.Navigation("DietsAsPupil");

                    b.Navigation("Exercises");

                    b.Navigation("MentorOpinions");

                    b.Navigation("MentorPupils");

                    b.Navigation("PupilMentors");

                    b.Navigation("PupilOpinions");

                    b.Navigation("PupilTrainingPlans");

                    b.Navigation("TrainerGyms");

                    b.Navigation("TrainerTrainingPlans");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Address", b =>
                {
                    b.Navigation("Gyms");
                });

            modelBuilder.Entity("Training_and_diet_backend.Models.Gym", b =>
                {
                    b.Navigation("TrainerGyms");
                });
#pragma warning restore 612, 618
        }
    }
}
